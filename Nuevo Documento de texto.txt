
const moment = require('moment');

// Supongamos que tenemos una barbería con un horario de apertura y cierre
const barberia = {
  horario: {
    apertura: 9, // Hora de apertura en formato 24h
    cierre: 18 // Hora de cierre en formato 24h
  },
  espaciosDeTrabajo: 4 // Número de espacios de trabajo disponibles
};

// Supongamos que tenemos una lista de servicios y sus duraciones
const servicios = [
  {
    nombre: "Corte de cabello",
    duracion: 45 // Duración en minutos
  },
  {
    nombre: "Afeitado",
    duracion: 30
  },
  {
    nombre: "Manicura",
    duracion: 60
  }
];

// Función para encontrar las horas disponibles para un servicio dado en una fecha dada
async function encontrarHorasDisponibles(fecha, servicio) {
  
   // Buscamos el servicio en la lista de servicios para obtener su duración
   const servicioSeleccionado = servicios.find(s => s.nombre === servicio);
   if (!servicioSeleccionado) {
     console.log(`Lo siento, el servicio ${servicio} no está disponible.`);
     return null;
   }
   const duracionServicio = servicioSeleccionado.duracion;
  
   // Creamos un arreglo para almacenar las horas disponibles
   const horasDisponibles = [];
  
   // Recorremos el horario de la barbería
   for (let hora = barberia.horario.apertura; hora < barberia.horario.cierre; hora++) {
     // Calculamos la hora de finalización del servicio
     const horaFinalizacion = hora + (duracionServicio / 60);
     
     // Verificamos si hay espacios disponibles durante todo el tiempo que dura el servicio
     if (horaFinalizacion <= barberia.horario.cierre) {
       // Verificamos si hay reservas existentes que se superpongan con la hora y duración del servicio
       const reservasSuperpuestas = await Reserva.find({
         fecha: fecha,
         hora_inicio: { $lt: moment(horaFinalizacion, 'HH').format('HH:mm') },
         hora_fin: { $gt: moment(hora, 'HH').format('HH:mm') }
       });
       
       // Si hay menos reservas superpuestas que espacios de trabajo disponibles
       if (reservasSuperpuestas.length < barberia.espaciosDeTrabajo) {
         // Agregamos la hora al arreglo de horas disponibles
         horasDisponibles.push(moment(hora, 'HH').format('HH:mm'));
       }
     }
   }
  
   // Eliminamos horas duplicadas del arreglo de horas disponibles
   const horasDisponiblesUnicas = [...new Set(horasDisponibles)];
  
   // Ordenamos el arreglo de horas disponibles en orden ascendente
   horasDisponiblesUnicas.sort((a, b) => moment(a, 'HH:mm').diff(moment(b, 'HH:mm')));
  
   // Devolvemos el arreglo de horas disponibles
   return horasDisponiblesUnicas;
}

// Ejemplo de uso de la función (debes reemplazar la fecha y el ID del empleado con valores válidos)
const fechaCita = '2022-12-01';
const servicioCita = "Corte de cabello";
encontrarHorasDisponibles(fechaCita, servicioCita).then(horasDisponibles => {
  if (horasDisponibles && horasDisponibles.length > 0) {
     console.log(`Horas disponibles para ${servicioCita} en la fecha ${fechaCita}:`);
     for (const hora of horasDisponibles) {
       console.log(hora);
     }
  } else {
     console.log(`Lo siento, no hay horarios disponibles para ${servicioCita} en la fecha ${fechaCita}.`);
  }
});